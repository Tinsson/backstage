使用 PHP trim() 函数去除用户输入数据中不必要的字符 (如：空格，tab，换行)。
使用PHP stripslashes()函数去除用户输入数据中的反斜杠 (\)
使用 htmlspecialchars()可以对html元素进行转义
使用strpos() 函数可以查找字符串在另一字符串中第一次出现的位置
使用str_replace() 函数可以把字符替换成别的

if(!preg_match("/^[a-zA-Z ]*$/",$name)) 可以进行正则表达式匹配

include 即使包含文件已丢失还能继续执行
require 在框架、CMS或者复杂的程序中药用require来引入关键文件


fopen("test.txt","r");用于打开文件

session_start()函数必须位于<html>标签之前
empty判断是否为空的数值
isset来检测变量是否设置


$_REQUEST 用于收集HTML表单提交的数据

FILTER_SANITIZE_EMAIL 过滤器从字符串中删除电子邮件的非法字符
FILTER_VALIDATE_EMAIL 过滤器验证电子邮件地址的值

die()函数可以触发错误报告
可以创建一个函数然后设置错误处理程序
处理函数会有五个参数 

error_level      为用户定义的错误规定错误报告级别
error_message    为用户定义的错误规定错误消息。
error_file       规定错误发生的文件名。
error_line       规定错误发生的行号。
error_context    规定一个数组，包含了当错误发生时在用的每个变量以及它们的值。

这里设置了处理错误函数
set_error_handler("customError",E_USER_WARNING);

触发错误
trigger_error() 添加第二个参数可以规定触发的错误级别 如 E_USER_ERROR
可以在脚本中任何位置触发错误

error_log() 可以向指定文件或远程目的地发送错误信息
例如error_log("Error: [$errno] $errstr",1,"someone@example.com","From: webmaster@example.com");

Try   - 使用异常的函数应该位于 "try" 代码块内
Throw - 里规定如何触发异常。每一个 "throw" 必须对应至少一个 "catch"。
throw new Exception("变量值必须小于等于1")
Catch - "catch" 代码块会捕获异常，并创建一个包含异常信息的对象。
catch(Exception $e){  //这里是一个包含异常信息的对象
	echo $e->getMessage();
}

如果自定义一个异常处理程序得继承php的exception类的所有属性
class customException extends Exception{
	public function errorMessage(){
	  ...
	}
}
下面的throw为 throw new customException($email);
      catch为 catch(customException $e)
这里也继承了exception类的方法，如getLine()、getFile()、getMessage().
如果抛出了异常，就必须捕获它。

filter_var()       - 通过一个指定的过滤器来过滤单一的变量
filter_var_array() - 通过相同的或不同的过滤器来过滤多个变量
filter_input       - 获取一个输入变量，并对它进行过滤
filter_input_array - 获取多个输入变量，并通过相同的或不同的过滤器对它们进行过滤

两种过滤器
validating
用于验证用户输入
严格的格式规则
第一个成功则返回预期的类型，如果失败则返回false

sanitizing
用于允许或禁止字符串中指定的字符
无数据格式规则
始终返回字符串

FILTER_CALLBACK可以自定义函数作为过滤器使用
function convertSpace($string){
	return str_replace("_",".",$string);
}
$string = "www_daitingyuan_com";
echo filter_var($string,FILTER_CALLBACK,array("options"=>"convertSpace"));

filter_var($ip, FILTER_VALIDATE_IP, FILTER_FLAG_IPV6)检测ip变量是否是IPv6地址
filter_var($url, FILTER_VALIDATE_URL, FILTER_FLAG_QUERY_REQUIRED)检测url是否包含查询字符串
filter_var($str, FILTER_SANITIZE_STRING, FILTER_FLAG_STRIP_HIGH)来移除ASCII值大于127的字符，同样它也能移除HTML标签；


json_encode  可以对变量进行JSON编码
对PHP数组转换JSON格式数据
$arr = array('a' => 1, 'b' => 2, 'c' => 3, 'd' => 4, 'e' => 5);
echo json_encode($arr);
对PHP对象转换为JSON格式数据
class Emp {
   public $name = "";
   public $hobbies  = "";
   public $birthdate = "";
}
$e = new Emp();
$e->name = "sachin";
$e->hobbies  = "sports";
$e->birthdate = date('m/d/Y h:i:s a', "8/5/1974 12:20:03 p");
$e->birthdate = date('m/d/Y h:i:s a', strtotime("8/5/1974 12:20:03"));
echo json_encode($e);

json_decode  对JSON 格式的字符串进行解码，转换为PHP变量

 $json = '{"a":1,"b":2,"c":3,"d":4,"e":5}';
   var_dump(json_decode($json));        //返回对象
   var_dump(json_decode($json, true));  //返回数组